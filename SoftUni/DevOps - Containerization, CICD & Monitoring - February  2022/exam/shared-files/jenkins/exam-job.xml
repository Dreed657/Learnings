<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1174.vdcb_d054cf74a_">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2075.vce74e77b_ce40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2075.vce74e77b_ce40">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.3">
      <projectUrl>http://192.168.56.202:3000/vagrant/exam/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.3">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
        <hudson.triggers.SCMTrigger>
          <spec>H/15 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2683.vd0a_8f6a_1c263">
    <script>pipeline 
{
    agent {
        label &apos;containers.do1.exam&apos;
    }

    stages 
    {
        stage(&apos;Clone&apos;) 
        {
            steps 
            {
                git branch: &apos;main&apos;, url: &apos;http://192.168.56.202:3000/vagrant/exam&apos;
            }
        }
        stage(&apos;Build&apos;)
        {
            steps
            {
                sh &apos;cd client; docker image build -t img-client .&apos;
                sh &apos;cd generator; docker image build -t img-generator .&apos;
                sh &apos;cd storage; docker image build -t img-storage .&apos;
            }
        }
        stage(&apos;Run&apos;)
        {
            steps
            {
                sh &apos;docker container rm -f con-storage || true&apos;
                sh &quot;docker container run -d --name con-storage --net app-net -e MYSQL_ROOT_PASSWORD=&apos;ExamPa\$\$w0rd&apos; img-storage&quot;
                
                sh &apos;docker container rm -f con-client || true&apos;
                sh &apos;docker container run -d --name con-client --net app-net -p 8080:5000 img-client&apos;
                
                sh &apos;docker container rm -f con-generator || true&apos;
                sh &apos;docker container run -d --name con-generator --net app-net img-generator&apos;
            }
        }
        stage(&apos;Test&apos;)
        {
            steps
            {
                sh &apos;curl http://localhost:8080 || true&apos;
            }
        }
        stage(&apos;Deploy&apos;)
        {
            steps
            {
                sh &quot;docker push dreed657/con-storage&quot;
                sh &apos;docker push dreed657/con-client&apos;
                sh &apos;docker push dreed657/con-generator&apos;
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>